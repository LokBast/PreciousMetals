#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WindowsFormsApp1.DB
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Stock")]
	public partial class PurchaseLinqDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertBroker(Broker instance);
    partial void UpdateBroker(Broker instance);
    partial void DeleteBroker(Broker instance);
    partial void InsertBrokerProcent(BrokerProcent instance);
    partial void UpdateBrokerProcent(BrokerProcent instance);
    partial void DeleteBrokerProcent(BrokerProcent instance);
    partial void InsertCurrency(Currency instance);
    partial void UpdateCurrency(Currency instance);
    partial void DeleteCurrency(Currency instance);
    partial void InsertDays(Days instance);
    partial void UpdateDays(Days instance);
    partial void DeleteDays(Days instance);
    partial void InsertPurchase(Purchase instance);
    partial void UpdatePurchase(Purchase instance);
    partial void DeletePurchase(Purchase instance);
    partial void InsertPurchaseStatus(PurchaseStatus instance);
    partial void UpdatePurchaseStatus(PurchaseStatus instance);
    partial void DeletePurchaseStatus(PurchaseStatus instance);
    partial void InsertSize(Size instance);
    partial void UpdateSize(Size instance);
    partial void DeleteSize(Size instance);
    partial void InsertStock1(Stock1 instance);
    partial void UpdateStock1(Stock1 instance);
    partial void DeleteStock1(Stock1 instance);
    #endregion
		
		public PurchaseLinqDataContext() : 
				base(global::WindowsFormsApp1.Properties.Settings.Default.StockConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PurchaseLinqDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PurchaseLinqDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PurchaseLinqDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PurchaseLinqDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<View_1> View_1
		{
			get
			{
				return this.GetTable<View_1>();
			}
		}
		
		public System.Data.Linq.Table<Broker> Broker
		{
			get
			{
				return this.GetTable<Broker>();
			}
		}
		
		public System.Data.Linq.Table<BrokerProcent> BrokerProcent
		{
			get
			{
				return this.GetTable<BrokerProcent>();
			}
		}
		
		public System.Data.Linq.Table<Currency> Currency
		{
			get
			{
				return this.GetTable<Currency>();
			}
		}
		
		public System.Data.Linq.Table<Days> Days
		{
			get
			{
				return this.GetTable<Days>();
			}
		}
		
		public System.Data.Linq.Table<Purchase> Purchase
		{
			get
			{
				return this.GetTable<Purchase>();
			}
		}
		
		public System.Data.Linq.Table<PurchaseStatus> PurchaseStatus
		{
			get
			{
				return this.GetTable<PurchaseStatus>();
			}
		}
		
		public System.Data.Linq.Table<Size> Size
		{
			get
			{
				return this.GetTable<Size>();
			}
		}
		
		public System.Data.Linq.Table<Stock1> Stock1
		{
			get
			{
				return this.GetTable<Stock1>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.View_1")]
	public partial class View_1
	{
		
		private int _idPurchase;
		
		private string _LotNr;
		
		private string _Size;
		
		private System.Nullable<double> _Cts;
		
		private System.Nullable<int> _InrCt;
		
		private System.Nullable<decimal> _InrTotal;
		
		private System.Nullable<double> _Rate;
		
		private System.Nullable<decimal> _Ct;
		
		private System.Nullable<decimal> _Total;
		
		private System.Nullable<System.DateTime> _DatePurch;
		
		private System.Nullable<System.DateTime> _DueDate;
		
		private string _Status;
		
		private string _Suppliner;
		
		private System.Nullable<double> _Commission;
		
		private string _Remarks;
		
		private System.Nullable<int> _idCurrency;
		
		private System.Nullable<int> _idSize;
		
		private System.Nullable<int> _idDays;
		
		private System.Nullable<int> _idBroker;
		
		private System.Nullable<int> _idBrokerProcent;
		
		public View_1()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPurchase", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int idPurchase
		{
			get
			{
				return this._idPurchase;
			}
			set
			{
				if ((this._idPurchase != value))
				{
					this._idPurchase = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LotNr", DbType="VarChar(50)")]
		public string LotNr
		{
			get
			{
				return this._LotNr;
			}
			set
			{
				if ((this._LotNr != value))
				{
					this._LotNr = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="NVarChar(50)")]
		public string Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this._Size = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cts", DbType="Float")]
		public System.Nullable<double> Cts
		{
			get
			{
				return this._Cts;
			}
			set
			{
				if ((this._Cts != value))
				{
					this._Cts = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InrCt", DbType="Int")]
		public System.Nullable<int> InrCt
		{
			get
			{
				return this._InrCt;
			}
			set
			{
				if ((this._InrCt != value))
				{
					this._InrCt = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InrTotal", DbType="Money")]
		public System.Nullable<decimal> InrTotal
		{
			get
			{
				return this._InrTotal;
			}
			set
			{
				if ((this._InrTotal != value))
				{
					this._InrTotal = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Float")]
		public System.Nullable<double> Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this._Rate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ct", DbType="Money")]
		public System.Nullable<decimal> Ct
		{
			get
			{
				return this._Ct;
			}
			set
			{
				if ((this._Ct != value))
				{
					this._Ct = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Money")]
		public System.Nullable<decimal> Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this._Total = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatePurch", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatePurch
		{
			get
			{
				return this._DatePurch;
			}
			set
			{
				if ((this._DatePurch != value))
				{
					this._DatePurch = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DueDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this._DueDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Suppliner", DbType="NVarChar(50)")]
		public string Suppliner
		{
			get
			{
				return this._Suppliner;
			}
			set
			{
				if ((this._Suppliner != value))
				{
					this._Suppliner = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Commission", DbType="Float")]
		public System.Nullable<double> Commission
		{
			get
			{
				return this._Commission;
			}
			set
			{
				if ((this._Commission != value))
				{
					this._Commission = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="NVarChar(50)")]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this._Remarks = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCurrency", DbType="Int")]
		public System.Nullable<int> idCurrency
		{
			get
			{
				return this._idCurrency;
			}
			set
			{
				if ((this._idCurrency != value))
				{
					this._idCurrency = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idSize", DbType="Int")]
		public System.Nullable<int> idSize
		{
			get
			{
				return this._idSize;
			}
			set
			{
				if ((this._idSize != value))
				{
					this._idSize = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDays", DbType="Int")]
		public System.Nullable<int> idDays
		{
			get
			{
				return this._idDays;
			}
			set
			{
				if ((this._idDays != value))
				{
					this._idDays = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idBroker", DbType="Int")]
		public System.Nullable<int> idBroker
		{
			get
			{
				return this._idBroker;
			}
			set
			{
				if ((this._idBroker != value))
				{
					this._idBroker = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idBrokerProcent", DbType="Int")]
		public System.Nullable<int> idBrokerProcent
		{
			get
			{
				return this._idBrokerProcent;
			}
			set
			{
				if ((this._idBrokerProcent != value))
				{
					this._idBrokerProcent = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Broker")]
	public partial class Broker : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idBroker;
		
		private string _Broker1;
		
		private EntitySet<Purchase> _Purchase;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidBrokerChanging(int value);
    partial void OnidBrokerChanged();
    partial void OnBroker1Changing(string value);
    partial void OnBroker1Changed();
    #endregion
		
		public Broker()
		{
			this._Purchase = new EntitySet<Purchase>(new Action<Purchase>(this.attach_Purchase), new Action<Purchase>(this.detach_Purchase));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idBroker", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idBroker
		{
			get
			{
				return this._idBroker;
			}
			set
			{
				if ((this._idBroker != value))
				{
					this.OnidBrokerChanging(value);
					this.SendPropertyChanging();
					this._idBroker = value;
					this.SendPropertyChanged("idBroker");
					this.OnidBrokerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Broker", Storage="_Broker1", DbType="NChar(10)")]
		public string Broker1
		{
			get
			{
				return this._Broker1;
			}
			set
			{
				if ((this._Broker1 != value))
				{
					this.OnBroker1Changing(value);
					this.SendPropertyChanging();
					this._Broker1 = value;
					this.SendPropertyChanged("Broker1");
					this.OnBroker1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Broker_Purchase", Storage="_Purchase", ThisKey="idBroker", OtherKey="idBroker")]
		public EntitySet<Purchase> Purchase
		{
			get
			{
				return this._Purchase;
			}
			set
			{
				this._Purchase.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Purchase(Purchase entity)
		{
			this.SendPropertyChanging();
			entity.Broker = this;
		}
		
		private void detach_Purchase(Purchase entity)
		{
			this.SendPropertyChanging();
			entity.Broker = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BrokerProcent")]
	public partial class BrokerProcent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idBrokerProcent;
		
		private double _BrokerProcent1;
		
		private EntitySet<Purchase> _Purchase;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidBrokerProcentChanging(int value);
    partial void OnidBrokerProcentChanged();
    partial void OnBrokerProcent1Changing(double value);
    partial void OnBrokerProcent1Changed();
    #endregion
		
		public BrokerProcent()
		{
			this._Purchase = new EntitySet<Purchase>(new Action<Purchase>(this.attach_Purchase), new Action<Purchase>(this.detach_Purchase));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idBrokerProcent", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idBrokerProcent
		{
			get
			{
				return this._idBrokerProcent;
			}
			set
			{
				if ((this._idBrokerProcent != value))
				{
					this.OnidBrokerProcentChanging(value);
					this.SendPropertyChanging();
					this._idBrokerProcent = value;
					this.SendPropertyChanged("idBrokerProcent");
					this.OnidBrokerProcentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="BrokerProcent", Storage="_BrokerProcent1", DbType="Float NOT NULL")]
		public double BrokerProcent1
		{
			get
			{
				return this._BrokerProcent1;
			}
			set
			{
				if ((this._BrokerProcent1 != value))
				{
					this.OnBrokerProcent1Changing(value);
					this.SendPropertyChanging();
					this._BrokerProcent1 = value;
					this.SendPropertyChanged("BrokerProcent1");
					this.OnBrokerProcent1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BrokerProcent_Purchase", Storage="_Purchase", ThisKey="idBrokerProcent", OtherKey="idBrokerProcent")]
		public EntitySet<Purchase> Purchase
		{
			get
			{
				return this._Purchase;
			}
			set
			{
				this._Purchase.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Purchase(Purchase entity)
		{
			this.SendPropertyChanging();
			entity.BrokerProcent = this;
		}
		
		private void detach_Purchase(Purchase entity)
		{
			this.SendPropertyChanging();
			entity.BrokerProcent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Currency")]
	public partial class Currency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idCurrency;
		
		private string _Currency1;
		
		private EntitySet<Purchase> _Purchase;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidCurrencyChanging(int value);
    partial void OnidCurrencyChanged();
    partial void OnCurrency1Changing(string value);
    partial void OnCurrency1Changed();
    #endregion
		
		public Currency()
		{
			this._Purchase = new EntitySet<Purchase>(new Action<Purchase>(this.attach_Purchase), new Action<Purchase>(this.detach_Purchase));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCurrency", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idCurrency
		{
			get
			{
				return this._idCurrency;
			}
			set
			{
				if ((this._idCurrency != value))
				{
					this.OnidCurrencyChanging(value);
					this.SendPropertyChanging();
					this._idCurrency = value;
					this.SendPropertyChanged("idCurrency");
					this.OnidCurrencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Currency", Storage="_Currency1", DbType="NChar(10)")]
		public string Currency1
		{
			get
			{
				return this._Currency1;
			}
			set
			{
				if ((this._Currency1 != value))
				{
					this.OnCurrency1Changing(value);
					this.SendPropertyChanging();
					this._Currency1 = value;
					this.SendPropertyChanged("Currency1");
					this.OnCurrency1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_Purchase", Storage="_Purchase", ThisKey="idCurrency", OtherKey="idCurrency")]
		public EntitySet<Purchase> Purchase
		{
			get
			{
				return this._Purchase;
			}
			set
			{
				this._Purchase.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Purchase(Purchase entity)
		{
			this.SendPropertyChanging();
			entity.Currency = this;
		}
		
		private void detach_Purchase(Purchase entity)
		{
			this.SendPropertyChanging();
			entity.Currency = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Days")]
	public partial class Days : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idDays;
		
		private int _Days1;
		
		private EntitySet<Purchase> _Purchase;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidDaysChanging(int value);
    partial void OnidDaysChanged();
    partial void OnDays1Changing(int value);
    partial void OnDays1Changed();
    #endregion
		
		public Days()
		{
			this._Purchase = new EntitySet<Purchase>(new Action<Purchase>(this.attach_Purchase), new Action<Purchase>(this.detach_Purchase));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDays", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idDays
		{
			get
			{
				return this._idDays;
			}
			set
			{
				if ((this._idDays != value))
				{
					this.OnidDaysChanging(value);
					this.SendPropertyChanging();
					this._idDays = value;
					this.SendPropertyChanged("idDays");
					this.OnidDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Days", Storage="_Days1", DbType="Int NOT NULL")]
		public int Days1
		{
			get
			{
				return this._Days1;
			}
			set
			{
				if ((this._Days1 != value))
				{
					this.OnDays1Changing(value);
					this.SendPropertyChanging();
					this._Days1 = value;
					this.SendPropertyChanged("Days1");
					this.OnDays1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Days_Purchase", Storage="_Purchase", ThisKey="idDays", OtherKey="idDays")]
		public EntitySet<Purchase> Purchase
		{
			get
			{
				return this._Purchase;
			}
			set
			{
				this._Purchase.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Purchase(Purchase entity)
		{
			this.SendPropertyChanging();
			entity.Days = this;
		}
		
		private void detach_Purchase(Purchase entity)
		{
			this.SendPropertyChanging();
			entity.Days = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Purchase")]
	public partial class Purchase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idPurchase;
		
		private string _LotNr;
		
		private System.Nullable<double> _Cts;
		
		private System.Nullable<int> _InrCt;
		
		private System.Nullable<decimal> _InrTotal;
		
		private System.Nullable<double> _Rate;
		
		private System.Nullable<decimal> _Ct;
		
		private System.Nullable<decimal> _Total;
		
		private System.Nullable<System.DateTime> _DatePurch;
		
		private System.Nullable<System.DateTime> _DueDate;
		
		private string _Suppliner;
		
		private System.Nullable<double> _Commission;
		
		private string _Remarks;
		
		private System.Nullable<int> _idPurchaseStatus;
		
		private System.Nullable<int> _idCurrency;
		
		private System.Nullable<int> _idSize;
		
		private System.Nullable<int> _idDays;
		
		private System.Nullable<int> _idBroker;
		
		private System.Nullable<int> _idBrokerProcent;
		
		private EntityRef<Broker> _Broker;
		
		private EntityRef<BrokerProcent> _BrokerProcent;
		
		private EntityRef<Currency> _Currency;
		
		private EntityRef<Days> _Days;
		
		private EntityRef<PurchaseStatus> _PurchaseStatus;
		
		private EntityRef<Size> _Size;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidPurchaseChanging(int value);
    partial void OnidPurchaseChanged();
    partial void OnLotNrChanging(string value);
    partial void OnLotNrChanged();
    partial void OnCtsChanging(System.Nullable<double> value);
    partial void OnCtsChanged();
    partial void OnInrCtChanging(System.Nullable<int> value);
    partial void OnInrCtChanged();
    partial void OnInrTotalChanging(System.Nullable<decimal> value);
    partial void OnInrTotalChanged();
    partial void OnRateChanging(System.Nullable<double> value);
    partial void OnRateChanged();
    partial void OnCtChanging(System.Nullable<decimal> value);
    partial void OnCtChanged();
    partial void OnTotalChanging(System.Nullable<decimal> value);
    partial void OnTotalChanged();
    partial void OnDatePurchChanging(System.Nullable<System.DateTime> value);
    partial void OnDatePurchChanged();
    partial void OnDueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDueDateChanged();
    partial void OnSupplinerChanging(string value);
    partial void OnSupplinerChanged();
    partial void OnCommissionChanging(System.Nullable<double> value);
    partial void OnCommissionChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    partial void OnidPurchaseStatusChanging(System.Nullable<int> value);
    partial void OnidPurchaseStatusChanged();
    partial void OnidCurrencyChanging(System.Nullable<int> value);
    partial void OnidCurrencyChanged();
    partial void OnidSizeChanging(System.Nullable<int> value);
    partial void OnidSizeChanged();
    partial void OnidDaysChanging(System.Nullable<int> value);
    partial void OnidDaysChanged();
    partial void OnidBrokerChanging(System.Nullable<int> value);
    partial void OnidBrokerChanged();
    partial void OnidBrokerProcentChanging(System.Nullable<int> value);
    partial void OnidBrokerProcentChanged();
    #endregion
		
		public Purchase()
		{
			this._Broker = default(EntityRef<Broker>);
			this._BrokerProcent = default(EntityRef<BrokerProcent>);
			this._Currency = default(EntityRef<Currency>);
			this._Days = default(EntityRef<Days>);
			this._PurchaseStatus = default(EntityRef<PurchaseStatus>);
			this._Size = default(EntityRef<Size>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPurchase", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idPurchase
		{
			get
			{
				return this._idPurchase;
			}
			set
			{
				if ((this._idPurchase != value))
				{
					this.OnidPurchaseChanging(value);
					this.SendPropertyChanging();
					this._idPurchase = value;
					this.SendPropertyChanged("idPurchase");
					this.OnidPurchaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LotNr", DbType="NVarChar(50)")]
		public string LotNr
		{
			get
			{
				return this._LotNr;
			}
			set
			{
				if ((this._LotNr != value))
				{
					this.OnLotNrChanging(value);
					this.SendPropertyChanging();
					this._LotNr = value;
					this.SendPropertyChanged("LotNr");
					this.OnLotNrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cts", DbType="Float")]
		public System.Nullable<double> Cts
		{
			get
			{
				return this._Cts;
			}
			set
			{
				if ((this._Cts != value))
				{
					this.OnCtsChanging(value);
					this.SendPropertyChanging();
					this._Cts = value;
					this.SendPropertyChanged("Cts");
					this.OnCtsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InrCt", DbType="Int")]
		public System.Nullable<int> InrCt
		{
			get
			{
				return this._InrCt;
			}
			set
			{
				if ((this._InrCt != value))
				{
					this.OnInrCtChanging(value);
					this.SendPropertyChanging();
					this._InrCt = value;
					this.SendPropertyChanged("InrCt");
					this.OnInrCtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InrTotal", DbType="Money")]
		public System.Nullable<decimal> InrTotal
		{
			get
			{
				return this._InrTotal;
			}
			set
			{
				if ((this._InrTotal != value))
				{
					this.OnInrTotalChanging(value);
					this.SendPropertyChanging();
					this._InrTotal = value;
					this.SendPropertyChanged("InrTotal");
					this.OnInrTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Float")]
		public System.Nullable<double> Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ct", DbType="Money")]
		public System.Nullable<decimal> Ct
		{
			get
			{
				return this._Ct;
			}
			set
			{
				if ((this._Ct != value))
				{
					this.OnCtChanging(value);
					this.SendPropertyChanging();
					this._Ct = value;
					this.SendPropertyChanged("Ct");
					this.OnCtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Money")]
		public System.Nullable<decimal> Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatePurch", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatePurch
		{
			get
			{
				return this._DatePurch;
			}
			set
			{
				if ((this._DatePurch != value))
				{
					this.OnDatePurchChanging(value);
					this.SendPropertyChanging();
					this._DatePurch = value;
					this.SendPropertyChanged("DatePurch");
					this.OnDatePurchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DueDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this.OnDueDateChanging(value);
					this.SendPropertyChanging();
					this._DueDate = value;
					this.SendPropertyChanged("DueDate");
					this.OnDueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Suppliner", DbType="NVarChar(50)")]
		public string Suppliner
		{
			get
			{
				return this._Suppliner;
			}
			set
			{
				if ((this._Suppliner != value))
				{
					this.OnSupplinerChanging(value);
					this.SendPropertyChanging();
					this._Suppliner = value;
					this.SendPropertyChanged("Suppliner");
					this.OnSupplinerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Commission", DbType="Float")]
		public System.Nullable<double> Commission
		{
			get
			{
				return this._Commission;
			}
			set
			{
				if ((this._Commission != value))
				{
					this.OnCommissionChanging(value);
					this.SendPropertyChanging();
					this._Commission = value;
					this.SendPropertyChanged("Commission");
					this.OnCommissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="NVarChar(50)")]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPurchaseStatus", DbType="Int")]
		public System.Nullable<int> idPurchaseStatus
		{
			get
			{
				return this._idPurchaseStatus;
			}
			set
			{
				if ((this._idPurchaseStatus != value))
				{
					if (this._PurchaseStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidPurchaseStatusChanging(value);
					this.SendPropertyChanging();
					this._idPurchaseStatus = value;
					this.SendPropertyChanged("idPurchaseStatus");
					this.OnidPurchaseStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCurrency", DbType="Int")]
		public System.Nullable<int> idCurrency
		{
			get
			{
				return this._idCurrency;
			}
			set
			{
				if ((this._idCurrency != value))
				{
					if (this._Currency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidCurrencyChanging(value);
					this.SendPropertyChanging();
					this._idCurrency = value;
					this.SendPropertyChanged("idCurrency");
					this.OnidCurrencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idSize", DbType="Int")]
		public System.Nullable<int> idSize
		{
			get
			{
				return this._idSize;
			}
			set
			{
				if ((this._idSize != value))
				{
					if (this._Size.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidSizeChanging(value);
					this.SendPropertyChanging();
					this._idSize = value;
					this.SendPropertyChanged("idSize");
					this.OnidSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idDays", DbType="Int")]
		public System.Nullable<int> idDays
		{
			get
			{
				return this._idDays;
			}
			set
			{
				if ((this._idDays != value))
				{
					if (this._Days.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidDaysChanging(value);
					this.SendPropertyChanging();
					this._idDays = value;
					this.SendPropertyChanged("idDays");
					this.OnidDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idBroker", DbType="Int")]
		public System.Nullable<int> idBroker
		{
			get
			{
				return this._idBroker;
			}
			set
			{
				if ((this._idBroker != value))
				{
					if (this._Broker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidBrokerChanging(value);
					this.SendPropertyChanging();
					this._idBroker = value;
					this.SendPropertyChanged("idBroker");
					this.OnidBrokerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idBrokerProcent", DbType="Int")]
		public System.Nullable<int> idBrokerProcent
		{
			get
			{
				return this._idBrokerProcent;
			}
			set
			{
				if ((this._idBrokerProcent != value))
				{
					if (this._BrokerProcent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidBrokerProcentChanging(value);
					this.SendPropertyChanging();
					this._idBrokerProcent = value;
					this.SendPropertyChanged("idBrokerProcent");
					this.OnidBrokerProcentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Broker_Purchase", Storage="_Broker", ThisKey="idBroker", OtherKey="idBroker", IsForeignKey=true)]
		public Broker Broker
		{
			get
			{
				return this._Broker.Entity;
			}
			set
			{
				Broker previousValue = this._Broker.Entity;
				if (((previousValue != value) 
							|| (this._Broker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Broker.Entity = null;
						previousValue.Purchase.Remove(this);
					}
					this._Broker.Entity = value;
					if ((value != null))
					{
						value.Purchase.Add(this);
						this._idBroker = value.idBroker;
					}
					else
					{
						this._idBroker = default(Nullable<int>);
					}
					this.SendPropertyChanged("Broker");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BrokerProcent_Purchase", Storage="_BrokerProcent", ThisKey="idBrokerProcent", OtherKey="idBrokerProcent", IsForeignKey=true)]
		public BrokerProcent BrokerProcent
		{
			get
			{
				return this._BrokerProcent.Entity;
			}
			set
			{
				BrokerProcent previousValue = this._BrokerProcent.Entity;
				if (((previousValue != value) 
							|| (this._BrokerProcent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BrokerProcent.Entity = null;
						previousValue.Purchase.Remove(this);
					}
					this._BrokerProcent.Entity = value;
					if ((value != null))
					{
						value.Purchase.Add(this);
						this._idBrokerProcent = value.idBrokerProcent;
					}
					else
					{
						this._idBrokerProcent = default(Nullable<int>);
					}
					this.SendPropertyChanged("BrokerProcent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_Purchase", Storage="_Currency", ThisKey="idCurrency", OtherKey="idCurrency", IsForeignKey=true)]
		public Currency Currency
		{
			get
			{
				return this._Currency.Entity;
			}
			set
			{
				Currency previousValue = this._Currency.Entity;
				if (((previousValue != value) 
							|| (this._Currency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Currency.Entity = null;
						previousValue.Purchase.Remove(this);
					}
					this._Currency.Entity = value;
					if ((value != null))
					{
						value.Purchase.Add(this);
						this._idCurrency = value.idCurrency;
					}
					else
					{
						this._idCurrency = default(Nullable<int>);
					}
					this.SendPropertyChanged("Currency");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Days_Purchase", Storage="_Days", ThisKey="idDays", OtherKey="idDays", IsForeignKey=true)]
		public Days Days
		{
			get
			{
				return this._Days.Entity;
			}
			set
			{
				Days previousValue = this._Days.Entity;
				if (((previousValue != value) 
							|| (this._Days.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Days.Entity = null;
						previousValue.Purchase.Remove(this);
					}
					this._Days.Entity = value;
					if ((value != null))
					{
						value.Purchase.Add(this);
						this._idDays = value.idDays;
					}
					else
					{
						this._idDays = default(Nullable<int>);
					}
					this.SendPropertyChanged("Days");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PurchaseStatus_Purchase", Storage="_PurchaseStatus", ThisKey="idPurchaseStatus", OtherKey="idPurchaseStatus", IsForeignKey=true)]
		public PurchaseStatus PurchaseStatus
		{
			get
			{
				return this._PurchaseStatus.Entity;
			}
			set
			{
				PurchaseStatus previousValue = this._PurchaseStatus.Entity;
				if (((previousValue != value) 
							|| (this._PurchaseStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PurchaseStatus.Entity = null;
						previousValue.Purchase.Remove(this);
					}
					this._PurchaseStatus.Entity = value;
					if ((value != null))
					{
						value.Purchase.Add(this);
						this._idPurchaseStatus = value.idPurchaseStatus;
					}
					else
					{
						this._idPurchaseStatus = default(Nullable<int>);
					}
					this.SendPropertyChanged("PurchaseStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Size_Purchase", Storage="_Size", ThisKey="idSize", OtherKey="idSize", IsForeignKey=true)]
		public Size Size
		{
			get
			{
				return this._Size.Entity;
			}
			set
			{
				Size previousValue = this._Size.Entity;
				if (((previousValue != value) 
							|| (this._Size.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Size.Entity = null;
						previousValue.Purchase.Remove(this);
					}
					this._Size.Entity = value;
					if ((value != null))
					{
						value.Purchase.Add(this);
						this._idSize = value.idSize;
					}
					else
					{
						this._idSize = default(Nullable<int>);
					}
					this.SendPropertyChanged("Size");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PurchaseStatus")]
	public partial class PurchaseStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idPurchaseStatus;
		
		private string _PurchaseStatus1;
		
		private EntitySet<Purchase> _Purchase;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidPurchaseStatusChanging(int value);
    partial void OnidPurchaseStatusChanged();
    partial void OnPurchaseStatus1Changing(string value);
    partial void OnPurchaseStatus1Changed();
    #endregion
		
		public PurchaseStatus()
		{
			this._Purchase = new EntitySet<Purchase>(new Action<Purchase>(this.attach_Purchase), new Action<Purchase>(this.detach_Purchase));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPurchaseStatus", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idPurchaseStatus
		{
			get
			{
				return this._idPurchaseStatus;
			}
			set
			{
				if ((this._idPurchaseStatus != value))
				{
					this.OnidPurchaseStatusChanging(value);
					this.SendPropertyChanging();
					this._idPurchaseStatus = value;
					this.SendPropertyChanged("idPurchaseStatus");
					this.OnidPurchaseStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="PurchaseStatus", Storage="_PurchaseStatus1", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PurchaseStatus1
		{
			get
			{
				return this._PurchaseStatus1;
			}
			set
			{
				if ((this._PurchaseStatus1 != value))
				{
					this.OnPurchaseStatus1Changing(value);
					this.SendPropertyChanging();
					this._PurchaseStatus1 = value;
					this.SendPropertyChanged("PurchaseStatus1");
					this.OnPurchaseStatus1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PurchaseStatus_Purchase", Storage="_Purchase", ThisKey="idPurchaseStatus", OtherKey="idPurchaseStatus")]
		public EntitySet<Purchase> Purchase
		{
			get
			{
				return this._Purchase;
			}
			set
			{
				this._Purchase.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Purchase(Purchase entity)
		{
			this.SendPropertyChanging();
			entity.PurchaseStatus = this;
		}
		
		private void detach_Purchase(Purchase entity)
		{
			this.SendPropertyChanging();
			entity.PurchaseStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Size")]
	public partial class Size : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idSize;
		
		private string _Size1;
		
		private EntitySet<Purchase> _Purchase;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidSizeChanging(int value);
    partial void OnidSizeChanged();
    partial void OnSize1Changing(string value);
    partial void OnSize1Changed();
    #endregion
		
		public Size()
		{
			this._Purchase = new EntitySet<Purchase>(new Action<Purchase>(this.attach_Purchase), new Action<Purchase>(this.detach_Purchase));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idSize", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idSize
		{
			get
			{
				return this._idSize;
			}
			set
			{
				if ((this._idSize != value))
				{
					this.OnidSizeChanging(value);
					this.SendPropertyChanging();
					this._idSize = value;
					this.SendPropertyChanged("idSize");
					this.OnidSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Size", Storage="_Size1", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Size1
		{
			get
			{
				return this._Size1;
			}
			set
			{
				if ((this._Size1 != value))
				{
					this.OnSize1Changing(value);
					this.SendPropertyChanging();
					this._Size1 = value;
					this.SendPropertyChanged("Size1");
					this.OnSize1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Size_Purchase", Storage="_Purchase", ThisKey="idSize", OtherKey="idSize")]
		public EntitySet<Purchase> Purchase
		{
			get
			{
				return this._Purchase;
			}
			set
			{
				this._Purchase.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Purchase(Purchase entity)
		{
			this.SendPropertyChanging();
			entity.Size = this;
		}
		
		private void detach_Purchase(Purchase entity)
		{
			this.SendPropertyChanging();
			entity.Size = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stock1")]
	public partial class Stock1 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idStock;
		
		private string _LotNr;
		
		private string _Shape;
		
		private string _Color;
		
		private System.Nullable<double> _Carats;
		
		private System.Nullable<decimal> _Ct;
		
		private System.Nullable<decimal> _Total;
		
		private string _Purity;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidStockChanging(int value);
    partial void OnidStockChanged();
    partial void OnLotNrChanging(string value);
    partial void OnLotNrChanged();
    partial void OnShapeChanging(string value);
    partial void OnShapeChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    partial void OnCaratsChanging(System.Nullable<double> value);
    partial void OnCaratsChanged();
    partial void OnCtChanging(System.Nullable<decimal> value);
    partial void OnCtChanged();
    partial void OnTotalChanging(System.Nullable<decimal> value);
    partial void OnTotalChanged();
    partial void OnPurityChanging(string value);
    partial void OnPurityChanged();
    #endregion
		
		public Stock1()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idStock", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idStock
		{
			get
			{
				return this._idStock;
			}
			set
			{
				if ((this._idStock != value))
				{
					this.OnidStockChanging(value);
					this.SendPropertyChanging();
					this._idStock = value;
					this.SendPropertyChanged("idStock");
					this.OnidStockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LotNr", DbType="NVarChar(50)")]
		public string LotNr
		{
			get
			{
				return this._LotNr;
			}
			set
			{
				if ((this._LotNr != value))
				{
					this.OnLotNrChanging(value);
					this.SendPropertyChanging();
					this._LotNr = value;
					this.SendPropertyChanged("LotNr");
					this.OnLotNrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shape", DbType="NVarChar(50)")]
		public string Shape
		{
			get
			{
				return this._Shape;
			}
			set
			{
				if ((this._Shape != value))
				{
					this.OnShapeChanging(value);
					this.SendPropertyChanging();
					this._Shape = value;
					this.SendPropertyChanged("Shape");
					this.OnShapeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Color", DbType="NVarChar(50)")]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Carats", DbType="Float")]
		public System.Nullable<double> Carats
		{
			get
			{
				return this._Carats;
			}
			set
			{
				if ((this._Carats != value))
				{
					this.OnCaratsChanging(value);
					this.SendPropertyChanging();
					this._Carats = value;
					this.SendPropertyChanged("Carats");
					this.OnCaratsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ct", DbType="Money")]
		public System.Nullable<decimal> Ct
		{
			get
			{
				return this._Ct;
			}
			set
			{
				if ((this._Ct != value))
				{
					this.OnCtChanging(value);
					this.SendPropertyChanging();
					this._Ct = value;
					this.SendPropertyChanged("Ct");
					this.OnCtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Money")]
		public System.Nullable<decimal> Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Purity", DbType="NVarChar(50)")]
		public string Purity
		{
			get
			{
				return this._Purity;
			}
			set
			{
				if ((this._Purity != value))
				{
					this.OnPurityChanging(value);
					this.SendPropertyChanging();
					this._Purity = value;
					this.SendPropertyChanged("Purity");
					this.OnPurityChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
